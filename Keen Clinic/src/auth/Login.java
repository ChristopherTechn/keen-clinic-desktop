package auth;

import database.AppProperties;
import database.Database;
import java.awt.Desktop;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import main.Home;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import utils.Utils;

/**
 *
 * @author Mustafa Mohamed
 */
public class Login extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(Login.class.getName());
    public static int LOGGED_IN_USER_ID;

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        jLabelStatus.setText("");
        DocumentListener l = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                setStatus("");
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setStatus("");
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                setStatus("");
            }
        };
        jTextFieldUsername.getDocument().addDocumentListener(l);
        jPasswordFieldPassword.getDocument().addDocumentListener(l);
        jLabel1.putClientProperty("FlatLaf.style", "font: $h2.font");
        menuButtonAdvanced.setPopupMenu(jPopupMenuAdvanced);

        jTextFieldUsername.putClientProperty("JTextField.placeholderText", "Username");
        jPasswordFieldPassword.putClientProperty("JTextField.placeholderText", "Password");
        jTextFieldUsername.putClientProperty("JTextField.showClearButton", true);
        jPasswordFieldPassword.putClientProperty("JTextField.showClearButton", true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuAdvanced = new javax.swing.JPopupMenu();
        jMenuItemLogs = new javax.swing.JMenuItem();
        jMenuItemResetConfigurationData = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonLogin = new javax.swing.JButton();
        jXHyperlinkForgotPassword = new org.jdesktop.swingx.JXHyperlink();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jTextFieldUsername = new javax.swing.JTextField();
        menuButtonAdvanced = new org.httprpc.sierra.MenuButton();

        jMenuItemLogs.setText("Open Logs Folder");
        jMenuItemLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLogsActionPerformed(evt);
            }
        });
        jPopupMenuAdvanced.add(jMenuItemLogs);

        jMenuItemResetConfigurationData.setText("Reset Configuration Data...");
        jMenuItemResetConfigurationData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetConfigurationDataActionPerformed(evt);
            }
        });
        jPopupMenuAdvanced.add(jMenuItemResetConfigurationData);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Keen Clinic - Login");
        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Enter your username and password");

        jLabel4.setText("Username");

        jLabel5.setText("Password");

        jLabelStatus.setText("jLabel6");

        jButtonLogin.setText("Login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jXHyperlinkForgotPassword.setText("Forgot username or password");
        jXHyperlinkForgotPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXHyperlinkForgotPasswordActionPerformed(evt);
            }
        });

        jPasswordFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldPasswordActionPerformed(evt);
            }
        });

        menuButtonAdvanced.setText("Advanced");
        menuButtonAdvanced.setComponentPopupMenu(jPopupMenuAdvanced);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 67, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jXHyperlinkForgotPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(menuButtonAdvanced, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelStatus)
                .addGap(18, 18, 18)
                .addComponent(jButtonLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXHyperlinkForgotPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuButtonAdvanced, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        onLogin();
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void jPasswordFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldPasswordActionPerformed
        onLogin();
    }//GEN-LAST:event_jPasswordFieldPasswordActionPerformed

    private void jMenuItemLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogsActionPerformed
        onOpenLogsFolder();
    }//GEN-LAST:event_jMenuItemLogsActionPerformed

    private void jXHyperlinkForgotPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXHyperlinkForgotPasswordActionPerformed
        onForgotPassword();
    }//GEN-LAST:event_jXHyperlinkForgotPasswordActionPerformed

    private void jMenuItemResetConfigurationDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetConfigurationDataActionPerformed
        onResetConfigurationData();
    }//GEN-LAST:event_jMenuItemResetConfigurationDataActionPerformed

    private void onResetConfigurationData() {
        int response = JOptionPane.showConfirmDialog(this, "Are "
                + "you sure you want to reset Keen Clinic's configuration data?\n"
                + "This will not delete patients and related data.", "Reset Data",
                JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            AppProperties.clearAll();
            JOptionPane.showMessageDialog(this,
                    "Configuration data reset successfully.", "Data Reset",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void setStatus(String status) {
        jLabelStatus.setText(status);
    }

    private boolean hasSecurityQuestions() throws SQLException {
        String sql = "SELECT COUNT(*) FROM securityQuestions";
        try (Connection conn = Database.getConnection()) {
            var resultSet = conn.createStatement().executeQuery(sql);
            if (resultSet.next()) {
                return resultSet.getInt(1) > 0;
            }
        }
        return false;
    }

    private void onForgotPassword() {
        try {
            if (hasSecurityQuestions()) {
                AnswerSecurityQuestions dialog = new AnswerSecurityQuestions(this, true);
                Utils.closeDialogOnEscape(dialog);
                dialog.setLocationRelativeTo(this);
                dialog.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this,
                        "You don't have any security questions. Please contact GVL Digtal Solutions for assitance.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "An error occurred. Please contact GVL Digtal Solutions for assitance.",
                    "Error", JOptionPane.ERROR);
        }
    }

    private void onLogin() {

        setStatus("");
        String sql = "SELECT id, username, `password` FROM `user` WHERE `username` = ? LIMIT 1";
        String username = jTextFieldUsername.getText();
        String password = String.valueOf(jPasswordFieldPassword.getPassword());
        LOGGER.log(Level.INFO, "Login attempted for user {0}", username);
        try (Connection conn = Database.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                boolean valid = BCrypt.checkpw(password, rs.getString("password"));
                if (valid) {
                    LOGGER.log(Level.INFO, "Login successful for user {0}", username);
                    LOGGED_IN_USER_ID = rs.getInt(1);
                    showHomeWindow();
                } else {
                    LOGGER.log(Level.INFO, "Invalid password");
                    jPasswordFieldPassword.setText("");
                    jTextFieldUsername.requestFocusInWindow();
                    jTextFieldUsername.selectAll();
                    setStatus("That didn't work. Try something else.");
                }
            } else {
                LOGGER.log(Level.INFO, "Invalid username");
                jPasswordFieldPassword.setText("");
                jTextFieldUsername.requestFocusInWindow();
                jTextFieldUsername.selectAll();
                setStatus("That didn't work. Try something else.");
            }

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            setStatus("An error occurred. Please try again after a few moments.");
        }
    }

    private void onOpenLogsFolder() {
        try {
            var home = System.getProperty("user.home");
            Desktop.getDesktop().open(new File(home));
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showHomeWindow() {
        Home home = new Home();
        Home.home = home;
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));

        boolean maximized = Boolean.parseBoolean(AppProperties.get("HomeMaximized", "true"));
        if (maximized) {
            home.setExtendedState(JFrame.MAXIMIZED_BOTH);
            home.setVisible(true);
        } else {
            home.setVisible(true);
            int width = Integer.parseInt(AppProperties.get("HomeWidth", String.valueOf(home.getWidth())));
            int height = Integer.parseInt(AppProperties.get("HomeHeight", String.valueOf(home.getHeight())));
            int x = Integer.parseInt(AppProperties.get("HomeX", String.valueOf(home.getLocationOnScreen().x)));
            int y = Integer.parseInt(AppProperties.get("HomeY", String.valueOf(home.getLocationOnScreen().y)));
            home.setSize(width, height);
            home.setExtendedState(JFrame.NORMAL);
            home.setLocation(x, y);
        }

        home.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                AppProperties.put("HomeMaximized", String.valueOf(home.getExtendedState() == JFrame.MAXIMIZED_BOTH));
                AppProperties.put("HomeHeight", String.valueOf(home.getHeight()));
                AppProperties.put("HomeWidth", String.valueOf(home.getWidth()));
                AppProperties.put("HomeX", String.valueOf(home.getLocationOnScreen().x));
                AppProperties.put("HomeY", String.valueOf(home.getLocationOnScreen().y));
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JMenuItem jMenuItemLogs;
    private javax.swing.JMenuItem jMenuItemResetConfigurationData;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JPopupMenu jPopupMenuAdvanced;
    private javax.swing.JTextField jTextFieldUsername;
    private org.jdesktop.swingx.JXHyperlink jXHyperlinkForgotPassword;
    private org.httprpc.sierra.MenuButton menuButtonAdvanced;
    // End of variables declaration//GEN-END:variables
}
