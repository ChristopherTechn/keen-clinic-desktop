package main.patient.visit;

import database.AppProperties;
import static main.patient.event.GlobalEventManager.VISIT_LISTENER_MANAGER;
import main.patient.event.VisitAddedEvent;
import main.patient.event.VisitDeletedEvent;
import main.patient.event.VisitListener;
import main.patient.event.VisitUpdatedEvent;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import settings.Settings;
import static org.kordamp.ikonli.carbonicons.CarbonIcons.RENEW;
import org.kordamp.ikonli.swing.FontIcon;
import main.patient.patient.Patient;

/**
 *
 * @author Mustafa Mohamed
 */
public class PatientVisitHistory extends javax.swing.JDialog implements VisitListener {

    private final PatientVisitHistoryModel historyModel = new PatientVisitHistoryModel();
    private final int patientId;
    private final java.awt.Frame parent;

    private void setTableHeight() {
        int fontSize = 12;
        try {
            fontSize = Settings.getFontSize();
        } catch (SQLException ex) {
            Logger.getLogger(PatientVisitHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTableHistory.setRowHeight(fontSize * 3);

    }

    /**
     * Creates new form PatientVisitHistory
     *
     * @param parent
     * @param modal
     * @param patientId
     */
    public PatientVisitHistory(java.awt.Frame parent, boolean modal, int patientId) {
        super(parent, modal);
        initComponents();
        this.patientId = patientId;
        this.parent = parent;

        FontIcon icon = FontIcon.of(RENEW, 20);
        jButtonRefresh.setIcon(icon);
        jButtonRefresh.setText("");

        jTableHistory.setModel(historyModel);

        getPatientInfo();
        getVisitHistory();
        setTableHeight();

    }

    public void initWindow() {
        int width = getWidth();
        int height = getHeight();
        int x = getLocation().x;
        int y = getLocation().y;

        width = Integer.parseInt(AppProperties.get("PatientVisitHistoryWidth", String.valueOf(width)));
        height = Integer.parseInt(AppProperties.get("PatientVisitHistoryHeight", String.valueOf(height)));
        x = Integer.parseInt(AppProperties.get("PatientVisitHistoryX", String.valueOf(x)));
        y = Integer.parseInt(AppProperties.get("PatientVisitHistoryY", String.valueOf(y)));

        setSize(width, height);
        setLocation(x, y);

    }

    private void saveWindowConfig() {
        int width = getWidth();
        int height = getHeight();
        int x = getLocation().x;
        int y = getLocation().y;
        AppProperties.put("PatientVisitHistoryWidth", String.valueOf(width));
        AppProperties.put("PatientVisitHistoryHeight", String.valueOf(height));
        AppProperties.put("PatientVisitHistoryX", String.valueOf(x));
        AppProperties.put("PatientVisitHistoryY", String.valueOf(y));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuHistory = new javax.swing.JPopupMenu();
        jMenuItemEdit = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jLabelPatient = new javax.swing.JLabel();
        jButtonRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHistory = new javax.swing.JTable();
        jButtonOK = new javax.swing.JButton();

        jPopupMenuHistory.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuHistoryPopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuItemEdit.setText("Edit Visit...");
        jMenuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditActionPerformed(evt);
            }
        });
        jPopupMenuHistory.add(jMenuItemEdit);

        jMenuItemDelete.setText("Delete...");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jPopupMenuHistory.add(jMenuItemDelete);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visit History");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabelPatient.setText("Showing visit history for ");

        jButtonRefresh.setText("jButton1");
        jButtonRefresh.setToolTipText("Refresh history");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jTableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "OPD Number", "Visit Date", "Weight", "Height", "BMI", "Outcome", "Diagnosis", "Treatment", "Remarks"
            }
        ));
        jTableHistory.setComponentPopupMenu(jPopupMenuHistory);
        jTableHistory.setRowHeight(30);
        jTableHistory.setShowHorizontalLines(true);
        jTableHistory.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jTableHistory);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRefresh))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonOK)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPatient)
                    .addComponent(jButtonRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOK)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        close();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        getVisitHistory();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jPopupMenuHistoryPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuHistoryPopupMenuWillBecomeVisible
        int selected = jTableHistory.getSelectedRowCount();
        jMenuItemDelete.setEnabled(selected > 0);
        jMenuItemEdit.setEnabled(selected == 1);
    }//GEN-LAST:event_jPopupMenuHistoryPopupMenuWillBecomeVisible

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        onDeleteVisits();
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jMenuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditActionPerformed
        onEditVisit();
    }//GEN-LAST:event_jMenuItemEditActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveWindowConfig();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        VISIT_LISTENER_MANAGER.addListener(this);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        VISIT_LISTENER_MANAGER.removeListener(this);
    }//GEN-LAST:event_formWindowClosed

    private void onDeleteVisits() {
        if (jTableHistory.getSelectedRowCount() > 0) {

            int response = JOptionPane.showConfirmDialog(this, """
                                                Are you sure you want to delete the selected visits?
                                                This action is irreversible.""",
                    "Delete Visits", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                List<Outpatient> selected = new ArrayList<>();
                for (int i : jTableHistory.getSelectedRows()) {
                    selected.add(historyModel.getRowItem(jTableHistory.convertRowIndexToModel(i)));
                }
                for (var o : selected) {
                    try {
                        boolean deleted = Outpatient.deleteOutpatient(o.id);
                        if (deleted) {
                            historyModel.removeRowItem(o);
                            VisitDeletedEvent event = new VisitDeletedEvent();
                            event.visit = o;
                            VISIT_LISTENER_MANAGER.notifyVisitDeleted(event);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(PatientVisitHistory.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void close() {
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    private void getPatientInfo() {
        try {
            Patient p = Patient.getPatient(this.patientId);
            jLabelPatient.setText("Showing visit history for " + p.formatPatientName());
        } catch (SQLException ex) {
            Logger.getLogger(PatientVisitHistory.class.getName()).log(Level.SEVERE, null, ex);
            jLabelPatient.setText("An error occured. Try again later.");
        }
    }

    private void getVisitHistory() {
        try {
            historyModel.clearRowItems();
            List<Outpatient> history = Outpatient.getPatientVisits(patientId);
            historyModel.addRowItems(history);
        } catch (SQLException ex) {
            Logger.getLogger(PatientVisitHistory.class.getName()).log(Level.SEVERE, null, ex);
            jLabelPatient.setText("An error occured. Try again later.");
        }
    }

    private void onEditVisit() {
        if (jTableHistory.getSelectedRowCount() != 1) {
            return;
        }
        Outpatient visit = historyModel.getRowItem(jTableHistory.convertRowIndexToModel(jTableHistory.getSelectedRow()));
        EditOutpatient edit = new EditOutpatient(parent, true, visit.id);
        edit.setLocationRelativeTo(this);
        edit.setVisible(true);
        if (edit.isEdited()) {
            getVisitHistory();
        }
    }

    @Override
    public void onVisitAdded(VisitAddedEvent event) {
        getVisitHistory();
    }

    @Override
    public void onVisitUpdated(VisitUpdatedEvent event) {
        getVisitHistory();
    }

    @Override
    public void onVisitDeleted(VisitDeletedEvent event) {
        getVisitHistory();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JLabel jLabelPatient;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemEdit;
    private javax.swing.JPopupMenu jPopupMenuHistory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableHistory;
    // End of variables declaration//GEN-END:variables

}
