package main.drug;

import database.Database;
import java.awt.event.AdjustmentEvent;
import main.Home;
import utils.Utils;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import main.drug.event.DrugAddedEvent;
import main.drug.event.DrugDeletedEvent;
import main.drug.event.DrugEventListener;
import main.drug.event.DrugUpdatedEvent;
import settings.DatabaseRestoredEvent;
import settings.SettingsEventListener;

/**
 *
 * @author Mustafa
 */
public class DrugsHome extends javax.swing.JPanel implements DrugEventListener, SettingsEventListener {

    private final DrugsTableModel drugsModel = new DrugsTableModel();

    /**
     * Creates new form DrugsHome
     */
    public DrugsHome() {
        initComponents();
        setupTable();
        setupSearchField();
        getDrugs();
    }

    private void setupSearchField() {
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                refreshDrugs();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                refreshDrugs();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                refreshDrugs();
            }
        });
    }

    private void setupTable() {
        jTableDrugs.setModel(drugsModel);
        jScrollPane1.getVerticalScrollBar().addAdjustmentListener((AdjustmentEvent e) -> {
            // Check if user has done dragging the scroll bar
            if (!e.getValueIsAdjusting()) {
                JScrollBar scrollBar = (JScrollBar) e.getAdjustable();
                int extent = scrollBar.getModel().getExtent();
                int maximum = scrollBar.getModel().getMaximum();
                if (extent + e.getValue() == maximum) {
                    offset += resultsPerPage;
                    getDrugs();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuDrugs = new javax.swing.JPopupMenu();
        jMenuItemAddDrug = new javax.swing.JMenuItem();
        jMenuItemEditDrug = new javax.swing.JMenuItem();
        jMenuItemDeleteDrug = new javax.swing.JMenuItem();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDrugs = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();

        jPopupMenuDrugs.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuDrugsPopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuItemAddDrug.setText("Add a Drug...");
        jMenuItemAddDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddDrugActionPerformed(evt);
            }
        });
        jPopupMenuDrugs.add(jMenuItemAddDrug);

        jMenuItemEditDrug.setText("Edit Selected Drug...");
        jMenuItemEditDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditDrugActionPerformed(evt);
            }
        });
        jPopupMenuDrugs.add(jMenuItemEditDrug);

        jMenuItemDeleteDrug.setText("Delete Selected Drugs...");
        jMenuItemDeleteDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteDrugActionPerformed(evt);
            }
        });
        jPopupMenuDrugs.add(jMenuItemDeleteDrug);

        jTableDrugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Description", "# in stock", "Min. stock quantity"
            }
        ));
        jTableDrugs.setComponentPopupMenu(jPopupMenuDrugs);
        jTableDrugs.setRowHeight(30);
        jTableDrugs.setShowHorizontalLines(true);
        jTableDrugs.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jTableDrugs);
        jTableDrugs.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButtonAdd.setText("Add...");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemAddDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddDrugActionPerformed
        onAddDrug();
    }//GEN-LAST:event_jMenuItemAddDrugActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        onAddDrug();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jMenuItemDeleteDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteDrugActionPerformed
        onDeleteDrugs();
    }//GEN-LAST:event_jMenuItemDeleteDrugActionPerformed

    private void jPopupMenuDrugsPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuDrugsPopupMenuWillBecomeVisible
        onMenuWillBecomeVisible();
    }//GEN-LAST:event_jPopupMenuDrugsPopupMenuWillBecomeVisible

    private void jMenuItemEditDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditDrugActionPerformed
        onEditDrug();
    }//GEN-LAST:event_jMenuItemEditDrugActionPerformed

    private void onMenuWillBecomeVisible() {
        int selectedCount = jTableDrugs.getSelectedRowCount();
        jMenuItemDeleteDrug.setEnabled(selectedCount > 0);
        jMenuItemEditDrug.setEnabled(selectedCount == 1);
    }

    private void onEditDrug() {
        if (jTableDrugs.getSelectedRowCount() == 1) {
            Drug drug = drugsModel.getRowItem(
                    jTableDrugs.convertRowIndexToModel(jTableDrugs.getSelectedRow()));
            EditDrug edit = new EditDrug(Home.home, false, drug.id);
            edit.setLocationRelativeTo(this);
            edit.setVisible(true);
        }
    }

    private void onAddDrug() {
        NewDrug dialog = new NewDrug(Home.home, false);
        Utils.closeDialogOnEscape(dialog);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private final int resultsPerPage = 100;
    private int offset = 0;

    private void getDrugs() {
        String sql = String.format("""
                                   SELECT * FROM drug 
                                   WHERE deletedAt IS NULL AND(`name` LIKE ? OR description LIKE ?)
                                   ORDER BY `name`, `id`
                                   LIMIT %d OFFSET %d
                                   """, resultsPerPage, offset);
        try (Connection conn = Database.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, "%" + jTextField1.getText().trim() + "%");
            stmt.setString(2, "%" + jTextField1.getText().trim() + "%");
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Drug drug = getDrugFromResultSet(rs);
                drugsModel.addRowItem(drug);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DrugsHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshDrugs() {
        offset = 0;
        drugsModel.clearRowItems();
        getDrugs();
    }

    private void onDeleteDrugs() {
        List<Drug> selectedDrugs = new ArrayList<>();
        for (int row : jTableDrugs.getSelectedRows()) {
            int index = jTableDrugs.convertRowIndexToModel(row);
            Drug drug = drugsModel.getRowItem(index);
            selectedDrugs.add(drug);
        }

        if (selectedDrugs.isEmpty()) {
            return;
        }

        String message = "Are you sure you want to delete the selected drug"
                + (selectedDrugs.size() == 1 ? "" : "s") + "?";
        int result = JOptionPane.showConfirmDialog(this, message,
                "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result != JOptionPane.YES_OPTION) {
            return;
        }

        boolean errorOccurred = false;
        for (Drug drug : selectedDrugs) {
            try {
                drug.delete();
            } catch (SQLException ex) {
                Logger.getLogger(DrugsHome.class.getName()).log(Level.SEVERE, null, ex);
                errorOccurred = true;
            }
        }

        if (errorOccurred) {
            JOptionPane.showMessageDialog(this,
                    "An error occurred while deleting the selected drugs.", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "The selected "
                    + "drug(s) were deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private Drug getDrugFromResultSet(ResultSet rs) throws SQLException {
        Drug drug = new Drug();
        drug.name = rs.getString("name");
        drug.description = rs.getString("description");
        drug.minShelfQuantity = rs.getInt("minShelfQuantity");
        drug.shelfQuantity = rs.getInt("shelfQuantity");
        drug.id = rs.getInt("id");
        return drug;
    }

    @Override
    public void onDrugAdded(DrugAddedEvent event) {
        drugsModel.addRowItem(event.drug);
    }

    @Override
    public void onDrugUpdated(DrugUpdatedEvent event) {
        Drug drug = event.drug;
        for (int i = 0; i < drugsModel.size(); i++) {
            Drug current = drugsModel.getRowItem(i);
            if (current.id == drug.id) {
                current.description = drug.description;
                current.minShelfQuantity = drug.minShelfQuantity;
                current.name = drug.name;
                current.shelfQuantity = drug.shelfQuantity;
                drugsModel.fireTableRowsUpdated(i, i);
                break;
            }
        }
    }

    @Override
    public void onDrugDeleted(DrugDeletedEvent event) {
        Drug deleted = event.drug;
        for (int i = 0; i < drugsModel.size(); i++) {
            Drug current = drugsModel.getRowItem(i);
            if (current.id == deleted.id) {
                drugsModel.removeRowItem(current);
                break;
            }
        }
    }

    @Override
    public void onDatabaseRestored(DatabaseRestoredEvent event) {
        refreshDrugs();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JMenuItem jMenuItemAddDrug;
    private javax.swing.JMenuItem jMenuItemDeleteDrug;
    private javax.swing.JMenuItem jMenuItemEditDrug;
    private javax.swing.JPopupMenu jPopupMenuDrugs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDrugs;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
