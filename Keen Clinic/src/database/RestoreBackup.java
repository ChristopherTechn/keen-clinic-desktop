package database;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static org.kordamp.ikonli.carbonicons.CarbonIcons.WARNING;
import org.kordamp.ikonli.swing.FontIcon;
import java.sql.*;
import settings.DatabaseRestoredEvent;
import static settings.GlobalSettingsEventManager.SETTINGS_MANAGER;

/**
 *
 * @author DELL
 */
public class RestoreBackup extends javax.swing.JDialog {

    private boolean restored = false;

    private File backupFile;

    public boolean isRestored() {
        return restored;
    }

    /**
     * Creates new form RestoreBackup
     *
     * @param parent
     * @param modal
     */
    public RestoreBackup(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jButtonRestoreNow.setEnabled(false);
        FontIcon icon = FontIcon.of(WARNING, 25, Color.RED);
        jLabelWarning.setIcon(icon);
        jLabelWarning.setText("");

        jLabelDanger.putClientProperty("FlatLaf.styleClass", "h2");
    }

    private void onSelectFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select Backup File");
        chooser.setApproveButtonText("Select");
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            jButtonRestoreNow.setEnabled(true);
            backupFile = chooser.getSelectedFile();
            jLabelFile.setText(backupFile.getName());
        }
    }

    private void onRestore() {
        // replace the current database
        if (backupFile != null) {

            Path tempFile = null;
            try {
                File current = new File(Database.getDatabaseFilePath());
                // create a copy of the current database so that we can undo if anything goes wrong
                tempFile = Files.createTempFile(null, null);

                Files.copy(backupFile.toPath(), current.toPath(), StandardCopyOption.REPLACE_EXISTING);
                // the restored database might not have all migrations execute
                // execute any pending migrations
                Database.createDatabaseIfNotExists();
                Database.runPendingMigrations();
                restored = true;
                JOptionPane.showMessageDialog(this,
                        "Restore from backup succeeded.",
                        "Restore Succeeded", JOptionPane.INFORMATION_MESSAGE);
                SETTINGS_MANAGER.notifyDatabaseRestored(new DatabaseRestoredEvent());
                close();
            } catch (SQLException | IOException | URISyntaxException ex) {
                Logger.getLogger(RestoreBackup.class.getName()).log(Level.SEVERE, null, ex);
                if (tempFile != null) {
                    File current = new File(Database.getDatabaseFilePath());
                    try {
                        Files.copy(tempFile, current.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    } catch (IOException ex1) {
                        Logger.getLogger(RestoreBackup.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                JOptionPane.showMessageDialog(this,
                        "An error occurred during the backup.\nYour data has been left intact.",
                        "Restore Failed", JOptionPane.INFORMATION_MESSAGE);
            } finally {
                if (tempFile != null) {
                    tempFile.toFile().delete();
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelWarning = new javax.swing.JLabel();
        jLabelDanger = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonRestoreNow = new javax.swing.JButton();
        jButtonSelectFile = new javax.swing.JButton();
        jLabelFile = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Restore from Backup");

        jLabelWarning.setText("jLabel1");

        jLabelDanger.setText("Restoring from a backup will overwrite existing data.");

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonRestoreNow.setText("Restore now");
        jButtonRestoreNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestoreNowActionPerformed(evt);
            }
        });

        jButtonSelectFile.setText("Select backup file...");
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        jLabelFile.setText("Backup file not selected. Click \"Select backup file...\" above to select a backup file");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonRestoreNow)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelWarning)
                            .addComponent(jLabelDanger)
                            .addComponent(jButtonSelectFile)
                            .addComponent(jLabelFile))
                        .addGap(0, 81, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelWarning)
                .addGap(18, 18, 18)
                .addComponent(jLabelDanger)
                .addGap(18, 18, 18)
                .addComponent(jButtonSelectFile)
                .addGap(18, 18, 18)
                .addComponent(jLabelFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonRestoreNow))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        close();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFileActionPerformed
        onSelectFile();
    }//GEN-LAST:event_jButtonSelectFileActionPerformed

    private void jButtonRestoreNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestoreNowActionPerformed
        onRestore();
    }//GEN-LAST:event_jButtonRestoreNowActionPerformed

    private void close() {
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonRestoreNow;
    private javax.swing.JButton jButtonSelectFile;
    private javax.swing.JLabel jLabelDanger;
    private javax.swing.JLabel jLabelFile;
    private javax.swing.JLabel jLabelWarning;
    // End of variables declaration//GEN-END:variables
}
